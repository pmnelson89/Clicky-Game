{"version":3,"sources":["components/Navbar/index.js","components/Header/index.js","components/CardBody/index.js","components/DriverCard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","messageStyle","color","concat","messageColor","react_default","a","createElement","class","className","src","alt","style","message","score","highScore","Header","CardBody","children","DriverCard","name","image","onClick","increment","id","shuffle","Footer","App","state","drivers","clicked","_this","setState","sort","Math","random","includes","push","newScore","_this2","this","components_Navbar","components_Header","components_CardBody","map","i","components_DriverCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3836fec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Navbar(props) {\n    const messageStyle = {\n        color: `${props.messageColor}`\n    };\n    return <div>\n        <nav class=\"navbar\">\n            <ul>\n                <li className=\"brand\">\n                    <img src=\"https://www.formula1.com/etc/designs/fom-website/images/f1_logo.svg\" \n                    class=\"logo\"\n                    alt=\"F1\"></img>\n                </li>\n                <li className=\"title\">\n                    Formula 1 Clicky Game\n                    <p style={messageStyle}>{props.message}</p>\n                </li>\n                <li>\n                    <span>\n                        <strong>Score: </strong> \n                        {props.score}\n                    </span>\n                    <span>\n                        <strong>High Score: </strong> \n                        {props.highScore}\n                    </span>\n                </li>\n            </ul>\n        </nav>\n    </div>\n}\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    return <div>\n        <header className=\"header\">\n            <h2>Click on an image to earn points, but don't click any image more than once!</h2>\n            <h4>Clicking an image more than once will reset the game.</h4>\n        </header>\n    </div>\n}\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardBody(props) {\n    return <div className=\"body\">\n        <div className=\"container\">\n            {props.children}\n        </div>\n    </div>\n}\n\nexport default CardBody;","import React from \"react\";\nimport \"./style.css\";\n\nfunction DriverCard(props) {\n  return (\n    <img\n      className=\"driverImg\"\n      alt={props.name} \n      src={props.image}\n      onClick={() => { props.increment(props.id); props.shuffle(props.id); }}\n    />\n  );\n}\n\nexport default DriverCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n    return <div>\n        <div className=\"footer\">\n            <p>Paul Nelson 2019</p>\n        </div>\n    </div>\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport CardBody from \"./components/CardBody\";\nimport DriverCard from \"./components/DriverCard\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\nimport drivers from \"./drivers.json\";\n\nclass App extends Component {\n  state = {\n    drivers,\n    score: 0,\n    highScore: 0,\n    clicked: [],\n    message: \"Select an image to begin.\",\n    messageColor: \"white\"\n  };\n\n  shuffle = id => {\n    this.setState({\n      drivers: this.state.drivers.sort(() => ( 0.5 - Math.random() ))\n    });\n  };\n\n  increment = id => {\n    let ids = this.state.clicked\n    const incorrect = ids.includes(id);\n    if(!incorrect) {\n      this.state.clicked.push(id);\n      let newScore = this.state.score + 1;\n      this.setState({score: newScore});\n      if(newScore === 12) {\n        this.setState({\n          score: 0,\n          clicked: [],\n          highScore: newScore,\n          message: \"You win!\",\n          messageColor: \"green\"\n\n        });\n      } else if (newScore > this.state.highScore) {\n        this.setState({\n          highScore: newScore,\n          message: \"Correct!\",\n          messageColor: \"green\"\n        });\n      } else {\n        this.setState({\n          message: \"Correct!\",\n          messageColor: \"green\"\n        });\n      }\n    } else {\n      this.setState({\n        score: 0,\n        clicked: [],\n        message: \"Wrong!  Try again!\",\n        messageColor: \"red\"\n      })\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Navbar \n          message={this.state.message}\n          messageColor={this.state.messageColor}\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <Header />\n        <CardBody>\n          {this.state.drivers.map( (drivers, i) => (\n            <DriverCard \n              id={drivers.id}\n              name={drivers.name}\n              image={drivers.image}\n              key={i}\n              increment={this.increment}\n              shuffle={this.shuffle}\n            />\n          ))}\n        </CardBody>\n      <Footer />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}